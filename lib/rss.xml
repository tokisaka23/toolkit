<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Notes]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>Notes</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Thu, 05 Jun 2025 03:44:19 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Thu, 05 Jun 2025 03:44:17 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[配置]]></title><description><![CDATA[ 
 <br>检查版本：<br>git --version
<br><br><br>
<br>system: 包含系统内所有用户和所有仓库的配置信息<br>
存放在 C:\Program Files\Git\etc\gitconfig
<br>global: 包含当前用户的所有git仓库配置<br>
存放在 C:\Users[用户名]\.gitconfig
<br>local: 仅适用于某个git仓库<br>
存放在 项目根目录/.git/config<br>
优先级：system &lt; global &lt; local
<br><br>
<br>查看当前git配置的所有信息
git config --list

git config -l


<br>查看系统全局配置
git config --system --list


<br>查看当前用户全局配置
git config --global --list


<br>查看当前仓库配置信息
git config --local --list


<br><br>git config --global user.name "your_name"
git config --global user.email "your_email@example.com"
<br>如想为特定项目设置不同参数，将 global 改为 local 即可<br><br><br>三种方式：<br>
<br>在项目文件夹中 shift + 右键，打开git bash
<br>使用命令行，pushd 命令直接导航到相应文件夹下
<br>使用命令行，先 E:\ 命令进入E盘，再 cd 到相应文件夹下<br>
输入
<br>git init
<br>git会初始化该目录，在其中创建一个隐藏的 .git 文件夹，用于存储所有版本控制信息<br><br>
<br>查看当前状态：（显示哪些文件未追踪，哪些文件已经修改但未提交）
git status


<br>添加文件到暂存区：<br>
添加所有文件：
git add .

添加特定文件：
git add filename


<br><br><br>git commit
<br>git 会为每个提交创建一个独立的版本历史记录，包含<br>
<br>id<br>
根据摘要算法计算出不重复的40位字符，本地命令中可以只用前六位<br>
可通过 id 找到曾经的任何内容和变动
<br>描述<br>
针对本次提交的描述说明，应准确填写，和代码中的注释同等重要
<br>快照内容<br>
完整的版本文件，以对象树的结构存在仓库下 .git\objects 目录中
<br>commit参数<br>
<br>提交，描述本次修改内容：
git commit -m "description"


<br>从工作区直接提交到版本库，略过 git add 步骤，不包括新增的文件
git commit -a


<br>提交暂存区的指定文件到仓库区
git commit filename


<br>提交指定文件，附带描述
git commit filename -m "description"


<br>使用一次新的 commit 代替上一次提交，此举会修改 commit 的hash 值 (id)
git commit --amend -m "description"


<br><br>（id，作者，时间，提交信息描述）<br>git log
<br>log参数<br>
<br>查看最近n条日志 (20)
git log -n20


<br>使日志输出以一行输出，更简洁
git log -n20 --oneline


<br>可视化显示分支关系
git log -n20 --graph


<br>显示特定文件的版本历史<br>
 	git log --follow [file] 	<br>
如显示 log 时分页：
<br>q：退出，回到命令行
<br>上下箭头或 j/k：上下移动
<br>空格：向下翻页
<br>b：向上翻页
<br>/ + 搜索词：搜索日志内容
<br><br><img alt="figs/git_fig1.png" src="tools\git\figs\git_fig1.png"><br><br>
<br>显示工作目录和暂存区之间的差异 ：<br>
找到哪些文件已经修改，但未提交<br>
删除的行用 - 标记，新增的行用 + 标记
git diff


<br>查看当前 git 仓库的状态
git status


<br><br><br>与 github 上的注册信息一一对应<br>git config --global user.name "your_name"
git config --global user.email "your_email@example.com"
<br><br>在 github 上创建仓库，找到<br>
两种协议：<br>
<br>HTTPS （安全性较低）<br>
每次操作时，均需要提供 github 用户名和密码进行身份验证
<br>SSH （安全性较高）<br>
使用 SSH 密钥对 认证用户身份<br>
私钥存储在本地，公钥存储在远程仓库中
<br><br>
<br>生成基于 ed25519 算法的密钥对：
<br>ssh-keygen -t ed25519 -C "your_email@example.com"
<br>成功创建后，会保存在 C:\Users\用户名\.ssh 目录下<br>
id_ed25519 表示私钥，id_ed25519.pub 表示公钥<br>
<br>将创建的公钥添加到远程仓库<br>
复制 id_ed25519.pub 中的内容，在 github 设置 - SSH and GPG keys 中添加 SSH keys<br>
使用以下命令测试是否连接成功 （输入yes）
<br>ssh -T git@github.com
<br>得到 Hi "your_name"! You've successfully authenticated, but GitHub does not provide shell access.<br><br><br>将远程仓库的完整副本（包括代码和历史记录）复制到本地<br>
本地新建文件夹，导航至该文件夹<br>
从 github 远程仓库上复制 HTTPS 或 SSH 链接，进行克隆<br>git clone "link"
<br><br>添加 origin 远程仓库<br>git remote add origin "link"
<br>删除 origin 远程仓库<br>git remote remove origin
<br>查看是否关联成功：<br>git remote -v
<br><br>本地仓库修改完成 (commit) 后，将更改同步到远程仓库<br>
远程仓库名：默认为 origin<br>
本地分支名：要推送的本地分支名称<br>
远程分支名：希望将更改推送到的远程分支名<br>git push &lt;远程仓库名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;
<br>-u 代表 --set-upstream，-u 告诉 Git 在推送代码到远程仓库的同时，将本地分支与远程分支关联起来，设置远程分支为本地分支的“上游分支”<br>
关联后，后续只需运行 git push 或 git pull，Git 会自动知道要推送或拉取的远程分支，无需每次指定远程仓库和分支名<br>git push -u origin "master"
<br>在 github 新建 branch 分支，推送到 branch 分支<br>git push origin "master":"branch"
<br>省略参数时，会默认将当前分支推送到对应的远程仓库分支<br>git push
<br><br>远程仓库名默认为 origin，远程分支名默认为 master 或 main<br>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;
<br>省略远程仓库名和远程分支名，则默认从当前分支所关联的远程仓库和分支中拉取更新<br>git pull
<br><br>
<br>master：在创建仓库时就存在，作为主分支，存放稳定的代码，不能随便修改或合并
<br>开发分支：用于开发使用，不影响主分支的稳定
<br>临时开发分支：开发分支的分支，完成后合并到开发分支，并删除自身
<br><br>创建本地 new_branch 分支，创建完后仍处于 master 下<br>git branch new_branch
<br>查看当前仓库所有分支，绿色代表当前位置<br>git branch
<br>切换本地分支至 new_branch 分支 (两种写法)<br>git checkout new_branch
<br>git switch new_branch
<br><br>切换到 master 分支<br>git merge new_branch
<br>如果发生冲突：<br>
<br>查看冲突文件
git status


<br>打开冲突文件<br>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>
主分支的内容 (master)<br>
=======<br>
要合并进来的分支的内容<br>
&gt;&gt;&gt;&gt;&gt;&gt;&gt; new_branch
<br>手动选择合适的内容保留，删除冲突标记 （&lt;, =, &gt; 共三行）
<br>添加到暂存区，提交
<br><br>使用 -d 删除分支时，必须确保该分支已合并回主分支，否则 git 会阻止删除<br>git branch -d new_branch
<br>如想强制删除，使用 -D<br>git branch -D new_branch
<br><br>Git Tag 就是仓库中某个重要提交的书签，用于标记重要版本，或关键节点 (v1.0, v2.0)<br><br>标签的创建默认指向当前最新的 commit<br>
<br>轻量标签 （信息简洁）
git tag &lt;标签名&gt;


<br>附注标签 （带有额外说明信息）<br>
 	git tag -a &lt;标签名&gt; -m "description" 	<br>
对过去的提交记录打标签，commit id 可使用 git log 查看（使用前六位）
<br>git tag -a &lt;标签名&gt; &lt;commit id&gt; -m "description"
<br><br>标签按照字母，数字顺序排列<br>git tag
<br>查看带有详细信息的标签：<br>git show &lt;标签名&gt;
<br><br>推送单个标签<br>git push origin &lt;标签名&gt;
<br>推送所有标签<br>git push origin --tags
<br>在 github 上可以点击 Tag, 查看所有标签信息<br><br>删除本地标签，但远程标签仍存在<br>git tag -d &lt;标签名&gt;
<br>删除远程标签<br>git push origin --delete &lt;标签名&gt;
<br><br><br>修改文件时，恢复该文件至最后一次 commit 后的状态，撤销所有未提交的修改<br>git checkout -- file_name
<br><br>先将文件从暂存区移除<br>git reset file_name
<br>再使用 checkout 撤销工作区的修改<br>git checkout --file_name
<br><br><br>回退或撤销本地提交，将分支的提交历史往回移动<br>git reset
<br>reset 有三种模式，默认为 mixed （HEAD表示当前所处的位置）<br><br>HEAD 往前移动一个提交位置（即上一次）：<br>git reset --soft HEAD~1
<br>撤回到标签名所在的提交：<br>git reset &lt;标签名&gt;
<br>撤回到某次提交：<br>git reset --hard &lt;commit id&gt;
<br><br>另一种撤销方式，创建一次新的提交，撤销某个历史提交的所有更改<br>
不会改变提交历史，团队协作更安全<br>git revert &lt;要撤销的id&gt;
<br>情景：A -&gt; B -&gt; C<br>
但是 B 有 bug ，使用 git revert id_of_B 撤销 B 后<br>
新的队列： A -&gt; B -&gt; C -&gt; D<br>
B 仍然保留， 新增 D（内容为撤销 B 的所有改动）<br><br><br>]]></description><link>tools\git\git-operation-guide.html</link><guid isPermaLink="false">tools/Git/Git Operation Guide.md</guid><pubDate>Thu, 22 May 2025 18:21:40 GMT</pubDate><enclosure url="tools\git\figs\git_fig1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;tools\git\figs\git_fig1.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[安装虚拟机]]></title><description><![CDATA[ 
 <br><br><a data-tooltip-position="top" aria-label="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Workstation%20Pro&amp;freeDownloads=true" rel="noopener nofollow" class="external-link" href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Workstation%20Pro&amp;freeDownloads=true" target="_blank">VMWare Workstation Pro</a><br>
<a data-tooltip-position="top" aria-label="https://vault.centos.org/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso" rel="noopener nofollow" class="external-link" href="https://vault.centos.org/7.6.1810/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso" target="_blank">CentOS操作系统</a>（已弃用）<br>
<a data-tooltip-position="top" aria-label="https://rockylinux.org/zh-CN/download" rel="noopener nofollow" class="external-link" href="https://rockylinux.org/zh-CN/download" target="_blank">RockyLinux操作系统</a><br>
<a data-tooltip-position="top" aria-label="https://dl.hostbuf.com/finalshell3/finalshell_windows_x64.exe" rel="noopener nofollow" class="external-link" href="https://dl.hostbuf.com/finalshell3/finalshell_windows_x64.exe" target="_blank">FinalShell</a><br><br><br><br>Linux 的目录结构是一个树型结构，没有盘符的概念<br>
所有文件存放在根目录 / 下面<br><br>Windows 系统中，路径之间的层级关系，使用 :\ 表示<br>
Linux 系统中，路径之间的层级关系，使用 :/ 表示<br>
描述路径永远以 / 开头，如 /user/local/hello.txt<br><br><br>学习 Linux，本质是学习在命令行下使用 Linux 的各种命令<br>
<br>命令行：即 Linux 终端 (Terminal)，是一种命令提示符页面。以纯“字符”的形式操作系统，可使用各种字符化命令对系统发出操作指令。
<br>命令：即 Linux 程序。一个命令就是一个 Linux 的程序。命令没有图形化界面。
<br><br>通用格式：<br>command [-options] [parameter]
<br>
<br>command：命令本身
<br>-options：命令的一些选项，可以通过选项控制命令的行为细节
<br>parameter：命令的参数，多数用于命令的指向目标等
<br>[] 表示可选
<br><br><br>列出当前工作目录下的内容：<br>ls [-a -l -h] [Linux路径]
<br>
<br>-a -l -h 为可选选项
<br>Linux 路径是此命令可选参数<br>
不使用选项和参数时，表示以平铺形式，列出当前工作目录下的内容<br>
<img alt="figs/linux_fig1.png" src="tools\linux\figs\linux_fig1.png">
<br><br>ls 命令表示列出当前工作目录下的内容<br>
<br>当前登录用户的 HOME 目录作为当前工作目录，故 ls 命令列出 HOME 目录的内容
<br>HOME 目录：每个 Linux 操作用户在 Linux 系统的个人账户目录，路径为 /home/用户名
<br><br><br>查看根目录下的列表：<br>ls /
<br><img alt="figs/linux_fig2.png" src="tools\linux\figs\linux_fig2.png"><br><br>
<br>-a 表示 all， 列出全部文件（包含隐藏的文件/文件夹）<br>
<img alt="figs/linux_fig3.png" src="tools\linux\figs\linux_fig3.png">
<br>
<br>其中以 . 开头的，表示 Linux 系统的隐藏文件/文件夹（只要以 . 开头，就自动隐藏）
<br>只有通过 -a 选项，才能看到
<br>
<br>-l 表示 list，以列表（竖向排列）的形式展示内容，并展示更多信息<br>
<img alt="figs/linux_fig4.png" src="tools\linux\figs\linux_fig4.png">
<br>选项也可以组合使用：<br>
以下写法均表示同时应用 -l 和 -a 的功能<br>
<br>ls -l -a
<br>ls -la
<br>ls -al
<br>
<br>-h 表示以易于阅读的形式，列出文件大小，如K、M、G<br>
-h 必须要搭配 -l 一起使用<br>
<img alt="figs/linux_fig5.png" src="tools\linux\figs\linux_fig5.png">
<br><br><br>cd 语法：(change directory)<br>cd [Linux 路径]
<br>
<br>cd 无需选项，只有参数，表示切换至的目录
<br>cd 不写参数时，表示回到用户的 HOME 目录 /home/用户名
<br><br>pwd语法：(print work directory)<br>pwd
<br>
<br>pwd 无选项，无参数
<br><br><br>要进入 Desktop 文件夹，可使用<br>
<br>绝对路径：以根目录为起点，描述路径
<br>cd /home/用户名/Desktop
<br>
<br>相对路径：以当前目录为起点，描述路径
<br>cd Desktop
<br><br>
<br>"." 表示当前目录<br>
cd ./Desktop 切换到当前目录下的 Desktop 目录内
<br>".." 表示上一级目录<br>
cd .. 切换回上一级目录， cd ../.. 切换到上两级的目录
<br>"~" 表示 HOME 目录<br>
cd ~ 切换到 HOME 目录，cd ~/Desktop 切换到 HOME 目录下的 Desktop 目录
<br><br>mkdir 语法：(make directory)<br>mkdir [-p] Linux路径
<br>
<br>-p 选项可选，表示创建 不存在 的父目录，适用于创建连续多层次的目录
<br>Linux 路径必填，即要创建的文件夹的路径，相对或绝对路径均可<br>
注：创建文件夹需要修改权限，操作必须在 HOME 目录内，不要在 HOME 外操作
<br><br><br>用于创建文件，touch 语法：<br>touch Linux路径
<br>
<br>无选项，参数必填，表示要创建的文件路径
<br>平铺模式下文件由浅色显示<br>
<img alt="tools/Linux/figs/linux_fig6.png" src="tools\linux\figs\linux_fig6.png"><br>列表模式下，前缀为 d 表示目录，为 - 表示文件<br>
<img alt="figs/linux_fig7.png" src="tools\linux\figs\linux_fig7.png"><br><br>用于查看文件内容，cat 语法：(concatenate)<br>cat Linux路径
<br>
<br>无选项，参数必填，表示被查看的文件路径
<br>cat 直接将内容全部显示出来
<br><br>用于查看文件内容，more 语法：<br>more Linux路径
<br>
<br>无选项，参数必填，表示被查看的文件路径
<br>more 支持翻页，如果文件内容过多，可以逐页展示
<br>在查看过程中，通过 &lt;space&gt; 翻页，通过 q 退出
<br><br><br>用于复制文件/文件夹，语法：(copy)<br>cp [-r] parameter1 parameter2
<br>
<br>-r 选项可选，复制文件夹时使用，表示递归
<br>前一个参数表示被复制的路径，后一个参数表示要去的路径
<br><br>用于移动文件/文件夹，语法：(move)<br>mv parameter1 parameter2
<br>
<br>前一个参数表示被移动的路径，后一个参数表示要去的路径
<br>可移动后改名，无改名需求时，parameter2 写到上一级目录即可
<br><br>用于删除文件/文件夹，语法：(remove)<br>rm [-r -f] parameter1 parameter2 ... parameterN
<br>
<br>-r 选项用于删除文件夹
<br>-f 用于强制删除（不弹出提示确认信息）<br>
普通用户删除内容不会弹出提示，只有 root 管理员用户删除内容会有提示（需要输入 y 或 n）<br>
可通过 su - root 临时切换到 root 用户，exit 命令退回普通用户
<br>参数 1-N 表示要删除的文件或文件夹
<br><br>* 表示通配符，即匹配任意内容，包括空<br>
test* 表示任何以 test 开头的内容，*test* 表示任何包含 test 的内容<br><br>Linux 命令的本体就是二进制可执行程序，相当于 Windows 中的 .exe<br><br>用于查看特定命令的程序文件存放位置，语法：<br>which 要查找的命令
<br><img alt="figs/linux_fig8.png" src="tools\linux\figs\linux_fig8.png"><br><br>用于搜索指定的文件<br>
<br>按文件名查找（可搭配通配符），语法：
<br>find 起始路径 -name "文件名"
<br>
<br>按文件大小查找
<br>find 起始路径 -size +|-n[kMG]
<br>
<br>+ 和 - 表示大于和小于
<br>n 表示大小数字
<br>kMG 表示大小单位，k 表示 kb，M 表示 MB，G 表示 GB
<br><br><br>用于从文件中通过关键词过滤文件的行，语法：<br>grep [-n] 关键词 文件路径
<br>
<br>-n 选项可选，表示在结果中显示匹配的行的行号
<br>参数，关键词必填，表示过滤的关键字，使用" "包括关键词，即可带有空格和其他特殊符号
<br>参数，文件路径必填，表示要过滤内容的文件路径 （可作为管道符的输入）<br>
可作为内容输入端口<br>
<img alt="figs/linux_fig9.png" src="tools\linux\figs\linux_fig9.png">
<br><br>用于统计文件的行数，单词数量等，语法：<br>wc [-c -m -l -w] 文件路径
<br>
<br>-c 统计 bytes 数量
<br>-m 统计字符数量
<br>-l 统计行数
<br>-w 统计单词数量
<br>参数，文件路径，被统计的文件（可作为管道符的输入）<br>
可作为内容输入端口
<br>wc 不带任何选项时，等同于 wc -lwc<br>
<img alt="figs/linux_fig10.png" src="tools\linux\figs\linux_fig10.png"><br><br>管道符：|<br>
用于将管道符左边的结果，作为右边命令的输入参数<br>
<img alt="figs/linux_fig11.png" src="tools\linux\figs\linux_fig11.png"><br>
管道符可嵌套使用： A | B | C<br>
<br>A 的结果作为 B 的输入
<br>(A | B) 的结果作为 C 的输入
<br><br><br>用于在命令行内输出指定内容，语法：<br>echo 输出的内容
<br>
<br>无选项，只有一个参数表示输出内容，复杂内容可用 "" 包括
<br><br>包围内容时，作为命令执行，而非普通字符<br>
<img alt="figs/linux_fig12.png" src="tools\linux\figs\linux_fig12.png"><br><br>用于查看文件尾部内容，跟踪文件最新修改，语法：<br>tail [-f -num] Linux路径
<br>
<br>-f 选项表示持续跟踪（使用 ctrl+C 停止）
<br>-num 选项表示查看尾部行数，不填默认为10
<br>参数，Linux路径表示被跟踪的文件路径
<br><br>&gt; 和 &gt;&gt;<br>
&gt; 用于将左侧的内容，覆盖写入到符号右侧指定的文件中<br>
&gt;&gt; 用于将左侧的内容，追加写入到符号右侧指定的文件中<br>
<img alt="figs/linux_fig13.png" src="tools\linux\figs\linux_fig13.png"><br>只要能产生结果的，都能写入右侧文件，如 ls<br><br>visual interface 的简称，Linux 中经典的文本编辑器<br>
vim 是 vi 的加强版，兼容 vi 的所有指令，不仅能编辑文本，也具有 shell 程序编辑的作用<br><br>
<br>命令模式 Command Mode<br>
此模式下，所敲的按键编辑器都理解为命令，以命令驱动执行不同的功能<br>
此模式下，不能自由进行文本编辑
<br>输入模式 Insert Mode<br>
即编辑模式，插入模式<br>
此模式下，可对文件内容进行自由编辑
<br>底线命令模式 Last Line Mode<br>
以 : 开始，通常用于文件的保存和退出
<br><br>通过 vi / vim 编辑文件，通过以下命令：<br>vi 文件路径
<br>vim 文件路径
<br>如文件不存在，此命令用于编辑新文件<br>
如文件存在，此命令用于编辑已有文件<br>
<img alt="figs/linux_fig14.png" src="tools\linux\figs\linux_fig14.png"><br>命令模式快捷键：<br><br><br><br><br><br><br><br>拥有最大权限的账户名为：root<br>
普通用户的权限在其 HOME 目录内不首先<br>
超出了 HOME 目录，则普通用户只有只读和执行权，无修改权<br><br>用于切换用户，语法：(switch user)<br>su [-] [用户名]
<br>
<br>

<br>符号可选，表示是否在切换用户后加载环境变量，建议带上


<br>用户名参数表示要切换到的用户，省略时表示切换到 root
<br>切换用户后，可通过 exit 命令退回上一个用户，也可用 ctrl + d
<br>普通用户切换到 root 用户需要密码，root 用户切换到其他用户无需密码
<br><br>用于为普通的命令授权，临时使用 root 权限执行该命令，语法：<br>sudo 其他命令
<br>
<br>不是所有用户都有权利使用 sudo，需要为普通用户配置 sudo 认证
<br><br>切换到 root 用户，执行 visudo 命令，会自动通过 vi 编辑器打开 /etc/sudoers<br>
在最后一行输入并保存<br>
<img alt="figs/linux_fig15.png" src="tools\linux\figs\linux_fig15.png"><br><br><br>Linux 系统中可配置多个用户，多个用户组，用户可加入多个用户组<br>
Linux 中关于权限管控的级别有2个：<br>
<br>针对用户的权限控制
<br>针对用户组的权限控制
<br><br>
<br>用户组管理（以下命令均需 root 用户执行）<br>
创建用户组
<br>groupadd 用户组名
<br>删除用户组<br>groupdel 用户组名
<br>
<br>用户管理（以下命令均需 root 用户执行）
<br>创建用户<br>useradd [-g -d] 用户名
<br>
<br>-g 指定用户的组，不指定 -g 时，会创建同名用户组并自动加入，指定 -g 需要组已经存在，如已经存在同名组，则必须要使用 -g
<br>-d 指定用户的 HOME 路径，不指定时，默认在 /home/用户名
<br>删除用户<br>userdel [-r] 用户名
<br>
<br>-r 用于删除用户的 HOME 目录，不使用时，保留其 HOME 目录
<br>查看用户所属组<br>id [用户名]
<br>
<br>参数表示被查看的用户，不提供时，查看自身
<br>修改用户所属组<br>usermod -aG 用户组 用户名
<br>
<br>将指定用户添加至指定用户组
<br><br>可查看当前系统中有哪些用户，语法：<br>getent passwd
<br>
<br>共有七份信息，分别是<br>
用户名: 密码(x) : 用户ID : 组ID : 描述信息(无用) : HOME目录 : 执行终端(默认bash)
<br>也可查看当前系统有哪些用户组，语法：<br>getend group
<br>
<br>包含三份信息，分别是<br>
组名称 : 组认证(显示为x) : 组ID
<br><br><br>通过 ls -l 以列表形式查看内容，也显示权限信息<br>
<img alt="figs/linux_fig16.png" src="tools\linux\figs\linux_fig16.png"><br>
红色框表示文件/文件夹的权限控制信息<br>
绿色框表示文件/文件夹所属用户<br>
蓝色框表示文件/文件夹所属用户组<br><br>权限细节（红色框）共分为10个槽位<br>
<br>-或d或l      - 表示文件，d 表示文件夹，l 表示软链接
<br>r或-      w或-      x或-      所属用户权限
<br>r或-      w或-      x或-      所属用户组权限
<br>r或-      w或-      x或-      其他用户权限
<br><br><br><br><br>用于修改文件/文件夹的权限信息（只有文件/文件夹的所属用户或 root 用户可以修改），语法：<br>chmod [-R] 权限 文件或文件夹
<br>
<br>-R 选项，用于对文件夹内的全部内容应用同样的操作<br>
如chmod u=rwx, g=rx, o=x hello.txt 将文件权限修改为：rwxr-x--x<br>
其中u表示所属用户权限，g表示所属用户组权限，o表示其他用户权限<br>
而chomod -R u=rwx, g=rx, o=x test 将文件夹 test 中的所有权限设为：rwxr-x--x
<br><br>r 记为4，w 记为2，x 记为1<br>
<br>0:：无任何权限，---
<br>1：仅有 x 权限，--x
<br>2：仅有 w 权限，-w-
<br>4：仅有 r 权限，r--
<br>5：有 r 和 x 权限，r-x
<br>6：有 r 和 w 权限，rw-
<br>7：有全部权限，rwx<br>
可以使用数字序号快速修改权限<br>
如chmod 751 hello.txt 等价于 chmod u=rwx, g=rx, o=x hello.txt
<br><br>用于修改文件/文件夹的所属用户和用户组，此命令只能 root 用户执行，语法：<br>chown [-R] [用户][:][用户组] 文件或文件夹
<br>
<br>-R 选项，用于对文件夹内的全部内容应用同样的操作
<br>: 用于分隔用户和用户组（可只修改其中一个，用户写在:前面，用户组写在:后面）
<br><br><br><br>
<br>ctrl+C<br>
① 强制停止程序运行 ② 命令输入错误时，退出当前输入，重新输入
<br>ctrl+D<br>
① 退出账户的登录 ② 退出某些程序的专属页面，如退出python（不能用于退出 vim）
<br><br>
<br>history 命令<br>
可查看历史输入过的命令，可通过history | grep ch 查找输入过的以 ch 开头的命令
<br>!<br>
! 加上命令前缀，自动执行上一次匹配前缀的命令
<br>ctrl+R<br>
输入命令去匹配历史命令，可以按回车执行，也可以按左右键，得到此命令（不执行）
<br><br>
<br>ctrl+A，跳到命令开头
<br>ctrl+E，跳到命令结尾
<br>ctrl+&lt;left&gt;，向左跳一个单词
<br>ctrl+&lt;right&gt;，向右跳一个单词
<br><br>
<br>ctrl+L
<br>clear 命令
<br><br><br>RPM 包软件管理器，用于自动化安装 Linux 软件，并可自动解决依赖问题，语法：<br>yum [-y] [install | remove | search] 软件名称
<br>
<br>-y 选项自动确认，无需手动确认安装或卸载过程
<br>install 安装，remove 卸载，search 搜索能否安装
<br>yum 命令需要 root 权限，需要联网<br>
通过yum [-y] install wget安装 wget，从网络上下载东西
<br><br>用于 Ubuntu 环境，同样需要 root 权限，语法：<br>apt [-y] [install | remove | search] 软件名称
<br><br>Linux 很多软件支持使用 systemctl 命令控制：启动，停止，开机自启<br>
能被 systemctl 管理的软件，一般也称为服务，语法：<br>systemctl start | stop | status | enable | disable 服务名
<br>
<br>start, stop: 启动，关闭，status: 查看状态
<br>enable, disable: 开机自启，关闭开机自启
<br>系统内置的服务很多，包括 NetworkManager（主网络服务），network（副网络服务），firewalld（防火墙服务），sshd, ssh服务<br>
部分软件安装后没有自动集成到 systemctl，需要手动添加
<br><br>在系统中创建软链接，可将文件/文件夹链接到其他位置，类似 Windows 系统的快捷方式，语法：<br>ln -s 参数1 参数2
<br>
<br>-s 选项，创建软链接
<br>参数1：被链接的文件/文件夹
<br>参数2：要链接去的目的地<br>
<img alt="figs/linux_fig17.png" src="tools\linux\figs\linux_fig17.png">
<br><br><br>用于查看系统的时间，语法：<br>date [-d] [+格式化字符串]
<br>
<br>-d 按照给定的字符串格式显示日期，一般用于日期计算
<br>格式化字符串：<br>
- %Y 年<br>
- %y 年份后两位数字 &lt;00 ... 99&gt;<br>
- %m 月份 &lt;01 ... 12&gt;<br>
- %d 日 &lt;01 ... 31&gt;<br>
- %H 小时 &lt;00 ... 23&gt;<br>
- %M 分钟 &lt;00 ... 59&gt;<br>
- %S 秒 &lt;00 ... 60&gt;<br>
- %s 自 1970-01-01 00:00:00 UTC 到现在的秒数<br>
<img alt="figs/linux_fig18.png" src="tools\linux\figs\linux_fig18.png">
<br><br>date -d "+1 day" +%Y%m%d 显示后一天日期<br>
date -d "+1 month" +%Y%m%d 显示下一月日期<br>
date -d "-1 month" +%Y%m%d 显示前一年日期<br>
支持的时间标记为：<br>
<br>year 年，month 月，day 天，hour 时，minute 分，second 秒
<br><br>使用 root 权限修改至东八区<br>sudo rm -f /etc/localtime
sudo ln -s /usr/share/zoneinfo/Asia/Shanghai etc/localtime
<br><br>使用sudo yum -y install chrony安装<br>
设置开机自启，启动后会自动帮忙联网校准系统时间<br>sudo systemctl enable chrony
<br>手动同步时间：<br>sudo systemctl start chronyd
sudo chronyc makestep
<br><br><br>每一台联网的电脑都有 IP 地址，用于和其他计算机进行通讯<br>
两个版本，V4版本和V6版本<br>
IPv4的地址格式：a.b.c.d，其中 abcd 表示0~255的数字<br>
查看本机 IP 地址：如无法查看，可安装 net-tools<br>ifconfig
<br>特殊 IP 地址：<br>
<br>127.0.0.1，用于指代本机
<br>0.0.0.0，特殊 IP 地址

<br>可以用于指代本机
<br>可以在端口绑定中用来确定绑定关系
<br>在一些 IP 地址限制中，表示所有 IP，如放行规则设为 0.0.0.0，表示允许任意 IP 访问


<br><br>每一台电脑也有一个名字，称为主机名<br>
可以给系统设置主机名<br>
查看本机主机名：<br>hostname
<br>修改主机名（需 root）：<br>sudo hostnamectl set-hostname 名称
<br><br>将网址映射到 IP 地址，通过网址即可访问服务器<br>
<img alt="figs/linux_fig19.png" src="tools\linux\figs\linux_fig19.png"><br>
即先看本机的记录，Linux 为/etc/hosts，再联网去 DNS 服务器询问<br>配置映射：<br>
在 Windows 的 "C:\Windows\System32\drivers\etc\hosts" 中配置记录，<br>
用管理员模式打开，在最后添加 192.168.40.129 rockylinux<br><br><br>当前虚拟机的 Linux 操作系统，其 IP 地址是通过 DHCP 服务获取的<br>
DHCP：动态获取 IP 地址，即每次重启设备后都会获取一次，可能导致 IP 地址频繁变更<br>
<br>连接到远程 Linux 系统时，如果 IP 地址经常变化，需要频繁修改适配
<br>配置好的映射关系也需要频繁修改<br>
因此需要配置固定 IP 地址
<br><br>
<br>配置 IP 地址网关和网段（IP 地址的范围）
<br>在 Linux 系统中手动修改配置文件，固定 IP<br>
网关和 DNS 设为网关 IP，固定地址设为 IP，设置固定连接：ipv4.method manual
<br>sudo nmcli con mod ens160 ipv4.addresses 192.168.40.129/24
sudo nmcli con mod ens160 ipv4.gateway 192.168.40.2
sudo nmcli con mod ens160 ipv4.dns 192.168.40.2
sudo nmcli con mod ens160 ipv4.method manual
sudo nmcli con up ens160
<br><br><br>用于检查服务器是否可联通，语法：<br>ping [-c num] ip或主机名
<br>
<br>-c 选项，表示检查的次数，不使用 -c 时，将无限持续检查
<br>参数可以为 ip 或主机名<br>
<img alt="figs/linux_fig20.png" src="tools\linux\figs\linux_fig20.png"><br>
表面上 ping baidu.com，实际上 ping 110.242.68.66
<br><br>非交互式的文件下载器，用于下载网络文件，语法：<br>wget [-b] url
<br>
<br>-b 选项 (backend)：后台下载，会将日志写入当前工作目录的 wget-log 文件
<br>url 表示下载链接
<br>在后台下载时，可使用tail -f wget-log监控下载进度
<br>无论下载是否完成，都会生成文件。未下载成功的文件需要手动删除
<br><br>用于发起 http 网络请求，可用于下载文件/获取信息，语法：<br>curl [-O] url
<br>
<br>-O 选项，用于下载文件，当 url 是下载链接时，可用此选项保存此文件
<br>url 表示要发起请求的网络地址
<br><br><br>端口是设备与外界通讯交流的出入口。端口可分为：物理端口，虚拟端口<br>
<br>物理端口：又称为接口，是可见的端口，如 USB 端口，RJ45 网口，HDMI 端口
<br>虚拟端口：计算机内部的端口，不可见，用于操作系统和外部进行交互<br>
IP 只能锁定到某台计算机，需要端口才能访问某个程序
<br>Linux 系统可支持 65535 个端口，这些端口分为 3 类使用：<br>
<br>公认端口：1~1023，通常用于一些系统内置或知名程序的预留使用，如 SSH 服务的22端口，HTTPS 服务的443端口。如非特殊需要，不要占用此范围内的端口
<br>注册端口：1024~49151，通常可随意使用，用于松散的绑定一些程序/服务
<br>动态端口：49152~65535，通常不会固定绑定程序，而是当程序对外进行网络链接时，临时使用
<br>可使用 nmap 查看端口占用情况（需要安装）<br>nmap ip或主机名
<br><br>用于查看指定端口的占用情况，或某进程占用哪个端口<br>netstat -anp | grep 端口号/进程号
<br><img alt="figs/linux_fig21.png" src="tools\linux\figs\linux_fig21.png"><br>
其中，127.0.0.1:631 表示端口绑定在 127.0.0.1 这个 IP 地址上，允许外部访问<br><br><br>程序被操作系统管理。每个程序运行时，会被操作系统注册为系统中的一个进程<br>
每个进程会分配一个独有的：进程 ID（进程号）<br><br>ps 命令用于查看进程信息，语法：<br>ps [-e -f]
<br>
<br>-e 选项，显示出所有的进程
<br>-f 选项，以完全格式化的形式展示全部信息
<br>一般固定用ps -ef列出所有进程的全部信息<br>
<img alt="figs/linux_fig22.png" src="tools\linux\figs\linux_fig22.png"><br>
UID：进程所属的用户 ID<br>
PID：进程的进程号 ID<br>
PPID：进程的父 ID（启动此进程的其他进程）<br>
C：进程的 CPU 占用率（百分比）<br>
STIME：进程的启动时间<br>
TTY：启动此进程的终端序号，如显示 ? ，表示非终端启动<br>
TIME：进程占用 CPU 的时间<br>
CMD：进程对应的名称，或启动路径，或启动命令
<br>可使用管道符，查看指定信息<br>ps -ef | grep 用户ID/进程号/名称/时间等
<br><br>kill 命令用于关闭进程，语法：<br>kill [-9] 进程ID
<br>
<br>-9 选项，表示强制关闭进程。不使用此选项时，会向进程发送信号，要求其关闭，是否关闭取决于进程自身处理机制
<br><br><br>通过top命令查看 CPU，默认每五秒刷新一次，按 q 或 ctrl+C 退出：<br>top
<br><img alt="figs/linux_fig23.png" src="tools\linux\figs\linux_fig23.png"><br>
<br>line1: top: 命令名称，21:57:57: 当前系统时间 ，up 2 min: 启动了2分钟，4 users: 4个用户登录，<br>
load average: 0.45 0.28 0.11: 1分钟，5分钟，15分钟平均负载
<br>line2: Tasks: 270个进程，1个进程正在运行，269个进程睡眠，0个停止进程，0个僵尸进程
<br>line3: CPU使用率，us: 用户CPU使用率，sy: 系统CPU使用率，ni: 高优先级进程占CPU时间百分比，id: 空闲CPU率，wa: IO等待CPU占用率，hi: CPU硬件中断率，si: CPU软件中断率，st: 强制等待占用CPU率
<br>line4: MiB Mem: 物理内存，total: 总量，free: 空闲，used: 使用，buff/cache: buff和cache占用
<br>line5: MiB Swap: 虚拟内存（交换空间），total, free, used
<br>PID：进程id，USER：进程所属用户，PR：进程优先级，越小越高，NI：负值表示高优先级，正表示低优先级，VIRT：进程使用虚拟内存，单位KB，RES：进程使用物理内存，单位KB，S：进程状态（S休眠，R运行，Z僵死，N负数优先级，I空闲），%CPU：进程占用CPU率，%MEM：进程占用内存率，TIME+：进程使用CPU时间总计，单位10毫秒，COMMAND：进程的命令或程序文件路径
<br>top 命令选项<br>top [-p -d -c -n -b -i -u]
<br>
<br>-p 选项，只显示某个进程的信息
<br>-d 选项，设置刷新时间，默认为 5s
<br>-c 选项，显示产生进程的完整命令，默认是进程名
<br>-n 选项，指定刷新次数，如top -n 3，刷新 3 次后退出
<br>-b 选项，以非交互非全屏模式运行，以批次的方式执行 top，一般配合-n指定输出几次统计信息，将输出重定向到指定文件，如top -b -n 3 &gt; /tmp/top.tmp
<br>-i 选项，不显示任何闲置（idle）或无用（zombie）的进程
<br>-u 选项，查找特定用户启动的进程
<br>top 交互式选项<br>
<br>h，显示帮助画面
<br>c，显示产生进程的完整命令，等同于-c参数，再次按下 c键，变为默认显示
<br>f，可选择需要展示的项目
<br>M，根据驻留内存大小（RES）排序
<br>P，根据 CPU 使用百分比大小进行排序
<br>T，根据时间/累计时间进行排序
<br>E，切换顶部内存显示单位
<br>e，切换进程内存显示单位
<br>l，切换显示平均负载和启动时间信息
<br>i，不显示闲置或无用的进程，等同于-i参数，再次按下，变为默认显示
<br>t，切换显示 CPU 状态信息
<br>m，切换内存显示信息
<br><br>通过df命令，查看磁盘使用情况，语法：<br>df [-h]
<br>
<br>-h 选项，以更加人性化的单位显示
<br>使用iostat命令，查看 CPU，磁盘速率的相关信息，（需安装 sysstat）语法：<br>iostat [-x][num1][num2]
<br>
<br>-x 选项，显示更多信息

<br>rrqm/s，每秒此设备相关的读取请求有多少被Merge了（当系统调用需要读取数据的时候，VFS将请求发到各个FS，如果FS发现不同的读取请求读取的是相同的Block的数据。FS会将这个请求合并Merge，提高IO利用率，避免重复调用）
<br>wrqm/s，每秒此设备相关的写入请求有多少被Merge了
<br>rsec/s，每秒读取的扇区数；sectors
<br>wsec/s，每秒写入的扇区数
<br>rKB/s，每秒发送到设备的读取请求数
<br>wKB/s，每秒发送到设别的写入请求数
<br>avgrq-sz，平均请求扇区的大小
<br>avgqu-sz，平均请求队列的长度，队列长度越短越好
<br>await，每一个IO请求的处理的平均时间（单位是微秒毫秒）
<br>svctm，表示平均每次设备I/O操作的服务时间（以毫秒为单位）
<br>%util，磁盘利用率


<br>num1，刷新间隔，num2，刷新次数
<br>tps：transfers per second
<br><br>通过sar命令查看网络的相关统计，语法：<br>sar -n DEV num1 num2
<br>
<br>-n 选项，查看网络，DEV 表示查看网络接口
<br>num1，刷新间隔，num2，查看次数<br>
信息解读：
<br>IFACE，本地网卡接口的名称
<br>rxpck/s，每秒接受的数据包
<br>txpck/s，每秒发送的数据包
<br>rxKB/s，每秒接受的数据包大小，单位KB
<br>txKB/s，每秒发送的数据包大小，单位KB
<br>rxcmp/s，每秒接受的压缩数据包
<br>txcmp/s，每秒发送的压缩包
<br>rxmcst/s，每秒接收的多播数据包
<br><br><br>环境变量是操作系统在运行的时候，记录的一些关键性信息，用于辅助程序运行<br>
env命令可查看当前系统中记录的环境变量<br>
环境变量是一种 KeyValue 结构<br>
<img alt="figs/linux_fig24.png" src="tools\linux\figs\linux_fig24.png"><br>
PATH 记录了系统执行任何命令的搜索路径，路径之间以:隔开，当前记录了<br>
<br>/home/tokisaka23/.local/bin
<br>/home/tokisaka23/bin
<br>/usr/local/bin
<br>/usr/bin
<br>/usr/local/sbin
<br>/usr/sbin<br>
当执行任何命令时，都会按照顺序，从上述路径中搜索要执行的程序的本体
<br><br>用于取“变量”的值<br>
获取 PATH 变量的值：<br>echo $PATH
<br>当和其他内容混合在一起，可用{}包括变量<br>echo ${PATH}ABC
<br><br>
<br>临时配置，语法：
<br>export 变量名=变量值
<br>
<br>永久配置

<br>针对当前用户生效：使用 vim 在~/.bashrc文件中添加配置
<br>针对所有用户生效：root 权限使用 vim 在/etc/profile文件中添加配置
<br>通过语法source .bashrc或source /etc/profile，立即生效，或重登 FinalShell 生效


<br><br>export PATH=$PATH:/新路径
<br>同样可临时，可永久<br><br><br>Finalshell 的下方窗体，提供了 Linux 的文件系统视图，可<br>
<br>浏览文件系统，找到合适的文件，右键点击下载，即可传输到本电脑
<br>浏览文件系统，找到合适的目录，将本地电脑的文件拖拽进入，即可上传数据到 Linux 中
<br><br>rz, sz 命令需要安装lrzsz<br>
rz 命令用于上传，语法：<br>rz
<br>sz 命令用于下载，语法：<br>sz 要下载的文件
<br>文件会自动下载到桌面的 fsdownload 文件夹中<br><br><br>用于压缩/解压缩 tar, gzip<br>
<br>.tar，称为 tarball ，归档文件，简单的将文件组装到 .tar 文件内，仅是简单的封装
<br>.gz，常见为 .tar.gz, .gzip 格式，即使用 gzip 算法压缩文件<br>
语法：
<br>tar [-c -v -x -f -z -C] 参数1 参数2 ... 参数N
<br>
<br>-c 选项，创建压缩文件，用于压缩模式
<br>-v 选项，显示压缩/解压缩过程，用于查看进度
<br>-x 选项，解压模式
<br>-f 选项，要创建的文件/要解压的文件, 此选项必须在所有选项中位于最后
<br>-z 选项，gzip 模式，否则是 tarball 格式，一般为首个
<br>-C 选项，选择解压路径，用于解压模式，和其他参数分开
<br>常用压缩选项组合：<br>
<br>将文件压缩到 test.rar 文件内
<br>tar -cvf test.rar 1.txt 2.txt 3.txt
<br>
<br>使用 gzip 模式压缩到 test.rar.gz 文件内
<br>tar -zcvf test.rar.gz 1.txt 2.txt 3.txt
<br>常用解压选项组合：<br>
<br>解压 test.rar 至当前目录
<br>tar -xvf test.rar
<br>
<br>解压 test.rar 至指定目录
<br>tar -xvf test.rar -C 路径
<br>
<br>以 gzip 模式解压到指定目录
<br>tar -zxvf test.rar.gz -C 路径
<br><br>压缩 zip 文件：<br>zip [-r] 参数1 参数2 ... 参数N
<br>
<br>-r 选项，当被压缩的包含文件夹时，需要使用
<br>解压 zip 文件：<br>unzip [-d] 参数
<br>
<br>-d 选项，制定解压目录
]]></description><link>tools\linux\linux-operation-guide.html</link><guid isPermaLink="false">tools/Linux/Linux Operation Guide.md</guid><pubDate>Thu, 05 Jun 2025 03:38:12 GMT</pubDate><enclosure url="tools\linux\figs\linux_fig1.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;tools\linux\figs\linux_fig1.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[基础语法]]></title><description><![CDATA[ 
 <br><a data-tooltip-position="top" aria-label="https://regexr.com" rel="noopener nofollow" class="external-link" href="https://regexr.com" target="_blank">在线练习网站</a> <br><br>正则表达式一般用两个 // 包裹，后跟一些修饰符<br>
如 g 代表全局匹配，i 代表忽略大小写，m 代表多行匹配<br><br>
<br>显示所有的 at
/at/g


<br>"." 表示换行符外的任意一个字符，at. 表示 at 后跟任意一个字符
/at./g


<br>使用方括号表示字符集合，只匹配指定的几种字符
/at[ces0]/g


<br>方括号内，使用 "-" 表示范围，a-z 表示所有小写字母
/at[a-z]/g

匹配 at 后跟着所有小写字母，或大写字母
/at[a-zA-Z]/g

数字也可以
/at[a-zA-Z1-3]/g


<br>方括号内，使用 ^ 取反，^a-z 表示除了小写字母外的任意字符<br>
（ ^ 只有在方括号内部表示取反）
/at[^a-z]/g

除了字母外的任意字符
/at[^a-zA-Z]/g


<br><br>
<br>\d 表示数字，作用同 [0-9]
/at\d/g


<br>\D 表示非数字，作用同 [^0-9]
/at\D/g


<br>\w 表示字母，数字，或下划线
/at\w/g


<br>W 表示除字母，数字，下划线外的字符 （空白字符或特殊字符）
/at\W/g


<br>\s 表示空白字符 （space 或 tab）
/at\s/g


<br>\S 表示非空白字符
/at\S/g


<br><br><br>
<br>^ 在方括号外，表示匹配整段文本的开头<br>
如启用多行模式 "//m"，也可以表示每一行的开头
/^a/gm


<br>$ 表示匹配每一行的结尾<br>
由于 "." 表示除换行符外的任意一个字符，这里需要加 \ 转义<br>
 	/\.$/gm 	<br>
找到一行中只有 at 的部分<br>
 	/^at$/gm 	<br>
运用：在 VSCode中，可使用 ^ 和 $ 搭配替换模式，在所有行头 / 尾添加相同字符
<br><br>\b 表示单词的边界<br>
<br>匹配以 in 开头的单词
/\bin/g


<br>匹配以 in 结尾的单词
/in\b/g


<br>匹配单词 "in"
/\bin\b/g


<br>\B 表示非单词边界<br>
<br>匹配单词中的 "in"
/\Bin\B/g


<br><br>
<br>"+" 表示前面的字符重复一次或多次，at+ 表示匹配 a 之后跟任意数量的 t
/at+/g


<br>"*" 表示前面的字符重复零次或多次
/at*/g


<br>? 表示前面的字符重复零次或一次
/at?/g


<br>使用 {} 表示指定的重复次数，下表示 attt
/at{3}/g

使用 , 表示范围
/at{3, 5}/g

省略后者，表示至少重复3次
/at{3,}/g

{} 后加 ? 开启非贪婪匹配模式，只要匹配到 3 个 t 就会停止
/at{3,}?/g


<br><br><br>可以将多个字符作为一个整体来处理<br>
<br>加上 () 作为整体，(at)* 表示 at 重复了多次
/(at)*/g

重复了三次
/(at){3}/g


<br>[] 表示内部任意一个都可以，既匹配 Pattern 也匹配 pattern
/[Pp]attern/g


<br>使用 | 表示或
/Pattern|pattern/g


<br>() 与 | 结合，效果类似 []
/(P|p)attern/g


<br><br>
<br>对于 2025-05-22<br>
可以使用 /\d{4}-\d{1,2}-\d{1,2}/g 匹配<br>
捕获分组：/(\d{4})-(\d{1,2})-(\d{1,2})/g<br>
切换为 Replace 模式，输入 $2-$3-$1，即可将日期改为 月-日-年 格式
<br>匹配多种日期格式：<br>
2025.05.22  2025-05-22  2025/05/22  2025_05_22  20250522
/(\d{4})[-/_.]?(\d{1,2})[-/_.]?(\d{1,2})/g


<br><br>使用 (?:)<br>\(\d{4})[-/_.]?(?:\d{1,2})[-/_.]?)(\d{1,2})/g
<br>此时捕获两个分组<br><br>匹配首尾字母相同的单词<br>/\b([a-z])[a-z]*\1\b/g
<br>([a-z])表示第一个字母并分组<br>
[a-z]* 表示中间有零或多个其他字母<br>
\1 表示引用第一个字母<br>
\b 表示边界匹配<br><br>前瞻：匹配某些字符前面的内容<br>
后顾：匹配某些字符后面的内容<br><br>使用 ?= 表示<br>
现有 $100, $200, $abc, $def<br>
如只想匹配 数字 前的 $ 符<br>/\$(?=\d+)/g
<br><br>使用 ?! 表示<br>
如只想匹配 非数字 前的 $ 符<br>/\$(?!\d+)/g
<br><br>使用 ?&lt;= 表示<br>
现有 $100, $200, $abc, $def, #100, #200<br>
如只想匹配 美元符 后的数字<br>/(?&lt;=\$)\d+/g
<br><br>使用 ?&lt;! 表示<br>
如只想匹配 非 $ 后的数字<br>/(?&lt;!\$)\b\d+\b/g
]]></description><link>tools\regex\regex-operation-guide.html</link><guid isPermaLink="false">tools/RegEx/RegEx Operation Guide.md</guid><pubDate>Thu, 22 May 2025 08:09:15 GMT</pubDate></item></channel></rss>